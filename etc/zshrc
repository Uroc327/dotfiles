autoload -U compinit
compinit

setopt correctall

autoload -U promptinit
promptinit
prompt gentoo

HISTSIZE=8192
HISTFILE="$HOME/.zsh_history"
SAVEHIST="$HISTSIZE"

setopt append_history
setopt hist_ignore_all_dups
setopt hist_ignore_space
setopt autocd

unsetopt beep

bindkey -v

typeset -A key

key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

[ -n "${key[Insert]}"   ] && bindkey "${key[Insert]}"   overwrite-mode
[ -n "${key[Delete]}"   ] && bindkey "${key[Delete]}"   delete-char
[ -n "${key[Home]}"     ] && bindkey "${key[Home]}"     beginning-of-line
[ -n "${key[End]}"      ] && bindkey "${key[End]}"      end-of-line
[ -n "${key[Up]}"       ] && bindkey "${key[Up]}"       up-line-or-search
[ -n "${key[Down]}"     ] && bindkey "${key[Down]}"     down-line-or-search
[ -n "${key[Left]}"     ] && bindkey "${key[Left]}"     backward-char
[ -n "${key[Right]}"    ] && bindkey "${key[Right]}"    forward-char
[ -n "${key[PageUp]}"   ] && bindkey "${key[PageUp]}"   beginning-of-buffer-or-history
[ -n "${key[PageDown]}" ] && bindkey "${key[PageDown]}" end-of-buffer-or-history

if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )) ; then
	function zle-line-init()
	{
		echoti smkx
	}
	
	function zle-line-finish()
	{
		echoti rmkx
	}

	zle -N zle-line-init
	zle -N zle-line-finish
fi

# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.  Use internal bash
# globbing instead of external grep binary.
use_color=false
#safe_term=${TERM//[^[:alnum:]]/?}   # sanitize TERM
safe_term=$TERM
match_lhs=""
[ -f ~/.dir_colors   ] && match_lhs="${match_lhs}$(<~/.dir_colors)"
[ -f /etc/DIR_COLORS ] && match_lhs="${match_lhs}$(</etc/DIR_COLORS)"
[ -z ${match_lhs}    ] && type -p dircolors >/dev/null && match_lhs=$(dircolors --print-database)

[[ $'\n'${match_lhs} == *$'\n'"TERM "${safe_term}* ]] && use_color=true

if ${use_color} ; then
	# Enable colors for ls, etc.  Prefer ~/.dir_colors #64489
	if type -p dircolors >/dev/null ; then
		if [ -f ~/.dir_colors ] ; then
			eval $(dircolors -b ~/.dir_colors)
		elif [ -f /etc/DIR_COLORS ] ; then
			eval $(dircolors -b /etc/DIR_COLORS)
		fi
	fi

	alias ls='ls --color=auto'
	alias grep='grep --colour=auto'
	alias egrep='egrep --colour=auto'
	alias fgrep='fgrep --colour=auto'
fi

unset key use_color safe_term match_lhs

source /etc/shellrc

